# The project name is used in the name of the Brew formula, archives, etc. 
# If none is given, it will be inferred from the name of the GitHub, GitLab, or Gitea release.
project_name: guanceexample
before:
  hooks:
    - go mod tidy

env:
  - GO111MODULE=on
  - CGO_ENABLED=0

builds:
  # You can have multiple builds defined as a yaml list
  # - main: ./cmd/cli
  #   id: "cli"
  #   binary: cli
  # - main: ./cmd/worker
  #   id: "worker"
  #   binary: worker

  - 
    # Path to main.go file or main package.
    # Notice: when used with `gomod.proxy`, this must be a package.
    # Default is `.`.
    main: .

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    # Default is the name of the project directory.
    binary: guanceexample

    # GOOS list to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are darwin and linux.
    goos:
      - linux
      - windows
      - darwin

    # GOARCH to build for.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Defaults are 386, amd64 and arm64.
    goarch:
      - amd64
      - arm64

    # GOARM to build for when GOARCH is arm.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Default is only 6.
    goarm:
      - 6
      # - 7

    # GOAMD64 to build when GOARCH is amd64.
    # For more info refer to: https://golang.org/doc/install/source#environment
    # Default is only v1.
    goamd64:
      - v2
      - v3

dockers:
  # You can declare multiple Docker images. 
  # They will be matched against the binaries generated by your builds section
  # and packages generated by your nfpms section.
  - 
    # GOOS of the built binaries/packages that should be used.
    # goos: linux

    # GOARCH of the built binaries/packages that should be used. 
    goarch: amd64

    # GOAMD64 of the built binaries/packages that should be used.
    # goamd64: 'v2'

    # Templates of the Docker image names.
    # if prefix URL, docker img will push.
    image_templates: 
    - "docker.io/brothersam/guanceexample:{{ .Version }}"
    # - "gcr.io/brothersam/guanceexample:{{ .Version }}"
    # - "brothersam/guanceexample:{{ .Version }}"


    # Skips the docker push.
    # Could be useful if you also do draft releases.
    # If set to auto, the release will not be pushed to the Docker repository
    #  in case there is an indicator of a prerelease in the tag, e.g. v1.0.0-rc1.
    # Defaults to false.
    skip_push: false

    # Path to the Dockerfile (from the project root).
    # Defaults to `Dockerfile`.
    dockerfile: Dockerfile

    # Set the "backend" for the Docker pipe.
    # Valid options are: docker, buildx, podman.
    # podman is a GoReleaser Pro feature and is only available on Linux.
    # Defaults to docker.
    use: docker

    # Template of the docker build flags.
    build_flag_templates:
    - --platform=linux/amd64
    - --label=guance.image.title={{ .ProjectName }}
    - --label=guance.image.description={{ .ProjectName }}
    - --label=guance.image.url=https://github.com/brothersam66/testgoreleaser
    - --label=guance.image.source=https://github.com/brothersam66/testgoreleaser
    - --label=guance.image.version={{ .Version }}
    - --label=guance.image.created={{ time "2006-01-02T15:04:05Z07:00" }}
    - --label=guance.image.revision={{ .FullCommit }}
    - --label=guance.image.licenses=MIT

  - 
    # goos: linux
    goarch: arm64
    # GOAMD64 of the built binaries/packages that should be used.
    goarm: 'v6'
    image_templates: 
    - "docker.io/brothersam/guanceexample:{{ .Version }}-arm"
    skip_push: false
    dockerfile: Dockerfile
    use: docker
    build_flag_templates:
    - --platform=linux/arm64/v6
    - --label=guance.image.title={{ .ProjectName }}
    - --label=guance.image.description={{ .ProjectName }}
    - --label=guance.image.url=https://github.com/brothersam66/testgoreleaser
    - --label=guance.image.source=https://github.com/brothersam66/testgoreleaser
    - --label=guance.image.version={{ .Version }}
    - --label=guance.image.created={{ time "2006-01-02T15:04:05Z07:00" }}
    - --label=guance.image.revision={{ .FullCommit }}
    - --label=guance.image.licenses=MIT

  # GoReleaser can be wired to nfpm to generate and publish .deb, .rpm and .apk packages.  
  nfpms:
  - maintainer: Carlos A Becker <root@carlosbecker.dev>
    description: Sample project.
    homepage: https://github.com/brothersam66/tasktimer
    license: MIT
    formats:
    - deb
    - rpm
    - apk     


env_files:
  github_token: ~/go/src/github.com/github_token